//	***--==Tic Tac Toe==--***
//	      ^^^^^^^^^^^^^
//		    *********
//
//     _Grid_       _Elements_
//	 1 | 2 | 3 		 0 | 1 | 2
//	---|---|---		---|---|---
//	 4 | 5 | 6 		 3 | 4 | 5
//	---|---|---		---|---|--- 
//	 7 | 8 | 9 		 6 | 7 | 8 
//
//            _teams_
//            X     O
//
//	Code Author: Gabriel Prestemon
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int printGrid(char grid[9]);
int checkWinner(char grid[9]);

int main (void)
{
	char grid[9] = {'1', '2', '3', '4', '5', '6', '7', '8', '9'};
	char user1[21];
	char user2[21];
	int userIn = 0;
	int occupy = 0;
	int win = 0;
	char winner;
	int i, j = 0;
	
	printf ("Welcome to Tic Tac Toe!\n");
	printf (" %c | %c | %c \n---|---|---\n", grid[0], grid[1], grid[2]);
	printf (" %c | %c | %c \n---|---|---\n", grid[3], grid[4], grid[5]);
	printf (" %c | %c | %c \n", grid[6], grid[7], grid[8]);
	
	printf ("\nEnter player 1 name: \n");
	scanf ("%20s", user1);

	printf ("\nEnter player 2 name: \n");
	scanf ("%20s", user2);

	while (win == 0){
		while (occupy == 0){
			printf ("\n%s to move, input grid number:\n", user1);
			scanf ("%d", &userIn);
			if (userIn > 9 || userIn < 1){
				printf ("Invalid input. Please enter another");
			} else {
				occupy = isdigit(grid[userIn - 1]);
				if (occupy != 0) {
					grid[userIn - 1] = 'X';
					break;
				} else if (occupy == 0){
					printf ("This spot is already taken. Please enter another.\n");
				}	
			}
		}

		printGrid(&grid[0]);
		win = checkWinner(&grid[0]);
		occupy = 0;


		j = 0;
		for (i = 0; i < 9; i++){
			if (isdigit(grid[i]) == 0){
				j++;
			}
		}
		if (j == 9 && win == 0){
			printf ("\nIt's a draw!\n\n");
			break;
		}
		if (win != 0){
			break;
		}


		while (occupy == 0){
			printf ("\n%s to move, input grid number:\n", user2);
			scanf ("%d", &userIn);
			if (userIn > 9 || userIn < 1){
				printf ("Invalid input. Please enter another");
			} else {
				occupy = isdigit(grid[userIn - 1]);
				if (occupy != 0) {
					grid[userIn - 1] = 'O';
					break;
				} else if (occupy == 0){
					printf ("This spot is already taken. Please enter another.\n");
				}		
			}
		}

		printGrid(&grid[0]);
		win = checkWinner(&grid[0]);
		occupy = 0;
	}

	if (win !=0){
		switch (win) {
			case 88:
				printf ("...And the winner is... %s!\n\n", user1);
				break;
			case 79:
				printf ("...And the winner is... %s!\n\n", user2);
				break;
		}
	}

	return 0;
}

int printGrid(char grid[9])
{
	printf ("\n %c | %c | %c \n---|---|---\n", grid[0], grid[1], grid[2]);
	printf (" %c | %c | %c \n---|---|---\n", grid[3], grid[4], grid[5]);
	printf (" %c | %c | %c \n", grid[6], grid[7], grid[8]);
	return 0;
}

int checkWinner(char grid[9])
{
	int win = 0;
	int alphG[10];
	int i = 0;

	for (i = 0; i < 9; i++){
		alphG[i] = grid[i];
	}

	if (alphG[0] == alphG[1] && alphG[0] == alphG[2]) { //1
		win = alphG[0];
	}
	if (alphG[3] == alphG[4] && alphG[3] == alphG[5]) { //2
		win = alphG[3];
	}
	if (alphG[6] == alphG[7] && alphG[6] == alphG[8]) { //3
		win = alphG[6];
	}
	if (alphG[0] == alphG[3] && alphG[0] == alphG[6]) { //4
		win = alphG[0];
	}
	if (alphG[1] == alphG[4] && alphG[1] == alphG[7]) { //5
		win = alphG[1];
	}
	if (alphG[2] == alphG[5] && alphG[2] == alphG[8]) { //6
		win = alphG[2];
	}
	if (alphG[0] == alphG[4] && alphG[0] == alphG[8]) { //7
		win = alphG[0];
	}
	if (alphG[2] == alphG[4] && alphG[2] == alphG[6]) { //8
		win = alphG[2];
	}
	return win;
}

//     _Grid_       _Elements_
//	 1 | 2 | 3 		 0 | 1 | 2
//	---|---|---		---|---|---
//	 4 | 5 | 6 		 3 | 4 | 5
//	---|---|---		---|---|--- 
//	 7 | 8 | 9 		 6 | 7 | 8 
//  
// WINNING COMBOS
// 1 2 3		0 1 2
// 4 5 6		3 4 5
// 7 8 9		6 7 8
// 1 4 7		0 3 6 
// 2 5 8		1 4 7 
// 3 6 9		2 5 8 
// 1 5 9		0 4 8
// 3 5 7		2 4 6
//
//WINNING COMBO ALGORITHMS 
//1	(alphG[0] == alphG[1] && alphG[0] == alphG[2])
//2	(alphG[3] == alphG[4] && alphG[3] == alphG[5])
//3	(alphG[6] == alphG[7] && alphG[6] == alphG[8])
//4	(alphG[0] == alphG[3] && alphG[0] == alphG[6])
//5	(alphG[1] == alphG[4] && alphG[1] == alphG[7])
//6	(alphG[2] == alphG[5] && alphG[2] == alphG[8])
//7	(alphG[0] == alphG[4] && alphG[0] == alphG[8])
//8	(alphG[2] == alphG[4] && alphG[2] == alphG[6])